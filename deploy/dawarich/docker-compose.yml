services:
  # Tailscale Sidecar Configuration
  tailscale:
    image: tailscale/tailscale:latest
    container_name: tailscale-${SERVICE}
    hostname: ${SERVICE}
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TS_EXTRA_ARGS=--reset --login-server=${CONTROL_SERVER_URL}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_ENABLE_HEALTH_CHECK=true
      - TS_LOCAL_ADDR_PORT=127.0.0.1:41234
    volumes:
      - ${HOME}/docker/headscale/${SERVICE}/ts_config:/config
      - ${HOME}/docker/headscale/${SERVICE}/ts_state:/var/lib/tailscale
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    dns:
      - ${DNS_SERVER}
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:41234/healthz"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: always

  # Dawarich Redis
  redis:
    image: redis:7.4-alpine
    container_name: db-${SERVICE}-redis # MUST MATCH REGIS NAME!!!!
    command: redis-server
    volumes:
      - ${HOME}/_app_data/${SERVICE}/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    restart: always

  # Dawarich Database (PostGIS)
  db:
    image: postgis/postgis:17-3.5-alpine
    shm_size: 1G
    container_name: db-${SERVICE}
    volumes:
      - ${HOME}/_app_data/${SERVICE}/database:/var/lib/postgresql/data
      - ${HOME}/_app_data/${SERVICE}/shared:/var/shared
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    restart: always

  # Dawarich App
  app:
    image: freikin/dawarich:latest
    container_name: app-${SERVICE}
    network_mode: service:tailscale
    volumes:
      - ${HOME}/_app_data/${SERVICE}/public:/var/app/public
      - ${HOME}/_app_data/${SERVICE}/watched:/var/app/tmp/imports/watched
      - ${HOME}/_app_data/${SERVICE}/storage:/var/app/storage
      - ${HOME}/_app_data/${SERVICE}/db_data:/dawarich_db_data
    environment:
      RAILS_ENV: development
      # REDIS_URL: redis://db-${SERVICE}-redis:6379  # MUST MATCH REGIS CONTAINER NAME!!!!
      # DATABASE_HOST: db-${SERVICE}
      REDIS_URL: redis://redis:6379  # MUST MATCH REGIS CONTAINER NAME!!!!
      DATABASE_HOST: db
      DATABASE_USERNAME: ${DB_USER}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      DATABASE_NAME: ${DB_NAME}
      MIN_MINUTES_SPENT_IN_CITY: 60
      APPLICATION_HOSTS: ${SERVICE}.app.corral.dev
      TIME_ZONE: Europe/Berlin
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: "false"
      PROMETHEUS_EXPORTER_HOST: 0.0.0.0
      PROMETHEUS_EXPORTER_PORT: 9394
      SELF_HOSTED: "true"
      STORE_GEODATA: "true"
    entrypoint: web-entrypoint.sh
    command: ['bin/rails', 'server', '-p', '3000', '-b', '::']
    healthcheck:
      test: ["CMD-SHELL", "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'"]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      tailscale:
        condition: service_healthy
    # stdin_open: true
    # tty: true
    # logging:
    #   driver: "json-file"
    #   options:
    #     max-size: "100m"
    #     max-file: "5"
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.50'    # Limit CPU usage to 50% of one core
    #       memory: '4G'    # Limit memory usage to 4GB
    restart: always

  # Dawarich Sidekiq (Background Jobs)
  sidekiq:
    image: freikin/dawarich:latest
    container_name: sidekiq-${SERVICE}
    network_mode: service:tailscale
    volumes:
      - ${HOME}/_app_data/${SERVICE}/public:/var/app/public
      - ${HOME}/_app_data/${SERVICE}/watched:/var/app/tmp/imports/watched
      - ${HOME}/_app_data/${SERVICE}/storage:/var/app/storage
    environment:
      RAILS_ENV: development
      # REDIS_URL: redis://db-${SERVICE}-redis:6379  # MUST MATCH REGIS CONTAINER NAME!!!!
      # DATABASE_HOST: db-${SERVICE}
      REDIS_URL: redis://redis:6379  # MUST MATCH REGIS CONTAINER NAME!!!!
      DATABASE_HOST: db
      DATABASE_USERNAME: ${DB_USER}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      DATABASE_NAME: ${DB_NAME}
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_PROTOCOL: https
      PROMETHEUS_EXPORTER_ENABLED: "false"
      PROMETHEUS_EXPORTER_HOST: app-${SERVICE}
      PROMETHEUS_EXPORTER_PORT: 9394
      SELF_HOSTED: "true"
      STORE_GEODATA: "true"
    entrypoint: sidekiq-entrypoint.sh
    # stdin_open: true
    # tty: true
    # logging:
    #   driver: "json-file"
    #   options:
    #     max-size: "100m"
    #     max-file: "5"
    command: ['sidekiq']
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f sidekiq"]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
      tailscale:
        condition: service_healthy
    restart: always